name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: cheerz-spring-app
  REGION: europe-west1

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Application
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Run tests
      run: ./gradlew test
    
    - name: Build application
      run: ./gradlew build

  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build application
      run: ./gradlew build
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker europe-west1-docker.pkg.dev
    
    - name: Build Docker image
      run: |
        docker build -t europe-west1-docker.pkg.dev/$PROJECT_ID/cheerz-registry/$SERVICE_NAME:$GITHUB_SHA .
        docker build -t europe-west1-docker.pkg.dev/$PROJECT_ID/cheerz-registry/$SERVICE_NAME:latest .
    
    - name: Create Artifact Registry repository
      run: |
        gcloud artifacts repositories create cheerz-registry \
          --repository-format=docker \
          --location=europe-west1 \
          --description="Docker repository for Cheerz Spring app" || true
    
    - name: Push Docker image
      run: |
        docker push europe-west1-docker.pkg.dev/$PROJECT_ID/cheerz-registry/$SERVICE_NAME:$GITHUB_SHA
        docker push europe-west1-docker.pkg.dev/$PROJECT_ID/cheerz-registry/$SERVICE_NAME:latest
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image europe-west1-docker.pkg.dev/$PROJECT_ID/cheerz-registry/$SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --port 8080
    
    - name: Get service URL
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
        echo "Application deployed at: $SERVICE_URL"
